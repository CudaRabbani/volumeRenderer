clear;
clc;
warning off
r = 512;
c = 512;
padX = 3;
padY = 3;
blockX = 16;
blockY = 16;
totalFrame = 10;

NBx = ceil( ( c - padX ) /  (blockX + padX) );
NBy = ceil( ( r - padY ) /  (blockY + padY) );

GW = NBx * blockX + (NBx+1) * padX;
GH = NBy * blockY + (NBy+1) * padY;
diffH = GH - r;
diffW = GW - c;
H = GH;
W = GW;
percentageSet = [0.3]; %, , 0.4, 0.5, 0.6, 0.7, 0.8, 0.9
[m n] = size(percentageSet);

psnrRatioCubicOn = zeros(1,totalFrame);
psnrRatioCubicOff = zeros(1,totalFrame);
psnrRatioCubicSuperOn = zeros(1,totalFrame);
psnrRatioCubicSuperOff = zeros(1,totalFrame);


count = 1;
path = ['../textFiles/Pattern/' num2str(H) 'by' num2str(W) '/' num2str(intPercent)]
dirName = [path '/resultImages'];
mkdir(char(dirName));
cubicOn = [dirName '/cubicOn.png']
cubicOff = [dirName '/cubicOff.png']
superOn = [dirName '/cubicSuperSamplingOn.png']
superOff = [dirName '/cubicSuperSamplingOff.png']
linear = [dirName '/CubicAll.png'];

for i=1:n
        percentage = percentageSet(i);
        intPercent = percentage * 100;
       
        
        psnrCubicOn = 0;
        psnrCubicOff = 0;
        psnrCubicSuperOn = 0;
        psnrCubicSuperOff = 0;
       
        frameCounter = 1;
    for frame = 1:totalFrame
        patternString = '';
        dirName = '';
        intPercent = percentageSet(i) * 100;        
        
        gtCubicOnDir = [path num2str(100) '/Result/triCubic/lightOn/'];
        gtCubicOffDir = [path num2str(100) '/Result/triCubic/lightOff/'];
        gtCubicSuperOnDir = [path num2str(100) '/Result/triCubic/superSampling/lightOn/'];
        gtCubicSuperOffDir = [path num2str(100) '/Result/triCubic/superSampling/lightOff/'];
        
        CubicOnDir = [path num2str(intPercent) '/Result/triCubic/lightOn/'];
        CubicOffDir = [path num2str(intPercent) '/Result/triCubic/lightOff/'];
        CubicSuperOnDir = [path num2str(intPercent) '/Result/triCubic/superSampling/lightOn/'];
        CubicSuperOffDir = [path num2str(intPercent) '/Result/triCubic/superSampling/lightOff/'];

        
        rgbFile = ['rgb_' num2str(frame) '.bin'];
               
        %triCubic section
        linearOnRGBfile = strcat(CubicOnDir,rgbFile);
        linearOffRGBfile = strcat(CubicOffDir,rgbFile);
        linearSuperOnRGBfile = strcat(CubicSuperOnDir,rgbFile);
        linearSuperOffRGBfile = strcat(CubicSuperOffDir,rgbFile);
        
        GTlinearOnRGBfile = strcat(gtCubicOnDir,rgbFile);
        GTlinearOffRGBfile = strcat(gtCubicOffDir,rgbFile);
        GTlinearSuperOnRGBfile = strcat(gtCubicSuperOnDir,rgbFile);
        GTlinearSuperOffRGBfile = strcat(gtCubicSuperOffDir,rgbFile);
        
        
        psnrCubicOn = calculatePSNR(linearOnRGBfile,GTlinearOnRGBfile,H,W) + psnrCubicOn;
        psnrCubicOff = calculatePSNR(linearOffRGBfile,GTlinearOffRGBfile,H,W) + psnrCubicOff;
        psnrCubicSuperOn = calculatePSNR(linearSuperOnRGBfile,GTlinearSuperOnRGBfile,H,W) + psnrCubicSuperOn;
        psnrCubicSuperOff = calculatePSNR(linearSuperOffRGBfile,GTlinearSuperOffRGBfile,H,W) + psnrCubicSuperOff;
        
        
         
        frameCounter = frameCounter +1;
        fclose('all');
    end
    psnrRatioCubicOn(i) = psnrCubicOn/frameCounter;
    psnrRatioCubicOff(i) = psnrCubicOff/frameCounter;
    psnrRatioCubicSuperOn(i) = psnrCubicSuperOn/frameCounter;
    psnrRatioCubicSuperOff(i) = psnrCubicSuperOff/frameCounter;
   
    
    count = count + 1;
end

x = 1:count-1;

yCubicOn = psnrRatioCubicOn(x);
yCubicOff = psnrRatioCubicOff(x);
yCubicSuperOn = psnrRatioCubicSuperOn(x);
yCubicSuperOff = psnrRatioCubicSuperOff(x);

%Saving Cubic Light On
figure;
plot(x,yCubicOn,'LineWidth',2);
grid on
grid minor
legend('Lighting On');
axis equal square
p = {'30'; '40'; '50'; '60'; '70'; '80'; '90'};
set(gca, 'XTick',[1:count-1],'XTickLabel', p)
title('PSNR of tri-linear interpolation for lighting on condition');
xlabel('percentage of using pixels');
ylabel('PSNR');
saveas(gcf,linearOn);

figure;
plot(x,yCubicOff,'LineWidth',2);
grid on
grid minor
legend('Lighting Off');
axis equal square
p = {'30'; '40'; '50'; '60'; '70'; '80'; '90'};
set(gca, 'XTick',[1:count-1],'XTickLabel', p)
title('PSNR of tri-linear interpolation for lighting off condition');
xlabel('percentage of using pixels');
ylabel('PSNR');
saveas(gcf,cubicOff);

figure;
plot(x,yCubicSuperOn,'LineWidth',2);
grid on
grid minor
legend('Lighting On');
axis equal square
p = {'30'; '40'; '50'; '60'; '70'; '80'; '90'};
set(gca, 'XTick',[1:count-1],'XTickLabel', p)
title('PSNR of tri-linear interpolation for lighting on condition with super sampling');
xlabel('percentage of using pixels');
ylabel('PSNR');
saveas(gcf,superOn);

figure;
plot(x,yCubicSuperOff,'LineWidth',2);
grid on
grid minor
legend('Lighting Off');
axis equal square
p = {'30'; '40'; '50'; '60'; '70'; '80'; '90'};
set(gca, 'XTick',[1:count-1],'XTickLabel', p)
title('PSNR of tri-linear interpolation for lighting off condition with super sampling');
xlabel('percentage of using pixels');
ylabel('PSNR');
saveas(gcf,superOff);

figure;
plot(x,yCubicOn,'-o',x,yCubicOff,'-o',x,yCubicSuperOn, x,yCubicSuperOn,'-o','LineWidth',2);
grid on
grid minor
legend('Lighting On','Lighting Off','Super Sampling with Lighting','Super Sampling without Lighting');
axis equal square
p = {'30'; '40'; '50'; '60'; '70'; '80'; '90'};
set(gca, 'XTick',[1:count-1],'XTickLabel', p)
title('PSNR of tri-linear interpolation for different conditions');
xlabel('percentage of using pixels');
ylabel('PSNR');
saveas(gcf,linear);
